using System;
using System.Collections.Generic;
using NUnit.Framework;
using UnityEngine;

public class ParkTest
{
    private Park _park;

    [SetUp]
    public void setupTest()
    {
        GameObject tempGameObject = new GameObject();
        tempGameObject.AddComponent<Park>();
        tempGameObject.AddComponent<MockTimer>();
        _park = tempGameObject.GetComponent<Park>();
        _park.Timer = tempGameObject.GetComponent<MockTimer>();
    }

    [Test]
    public void shouldHaveGuestCountInitializedTo0()
    {
        Assert.AreEqual(0, _park.GuestsCount);
    }

    [Test]
    public void shouldSpawnGuestsWithDefaultSpawnRateOf1()
    {
        Assert.AreEqual(0, _park.GuestsCount);
        _park.SpawnGuests();
        Assert.AreEqual(1, _park.GuestsCount);
    }

    [Test]
    public void shouldHaveBankrollInitializedTo0()
    {
        Assert.AreEqual(0f, _park.Bankroll);
    }

    [Test]
    public void shouldBeAbleToSetAdmissionFee()
    {
        _park.BaseAdmissionFee = 40f;
        Assert.AreEqual(40f, _park.AdmissionFee);
    }

    [Test]
    public void shouldPerceiveAdmissionFeeFromNewGuests()
    {
        Assert.AreEqual(0, _park.GuestsCount);
        Assert.AreEqual(0, _park.Bankroll);

        _park.BaseAdmissionFee = 40f;
        _park.SpawnGuests();

        Assert.AreEqual(1, _park.GuestsCount);
        Assert.AreEqual(40f, _park.Bankroll);
    }

    [Test]
    public void shouldSpawnAdditionalGuestsIfRequired()
    {
        Assert.AreEqual(0, _park.GuestsCount);
        Assert.AreEqual(0, _park.Bankroll);

        _park.BaseAdmissionFee = 40f;
        _park.SpawnGuests(5);

        Assert.AreEqual(5, _park.GuestsCount);
        Assert.AreEqual(5f * 40f, _park.Bankroll);
    }

    [Test]
    public void shouldAddToBankrollCorrectly()
    {
        Assert.AreEqual(0f, _park.Bankroll);
        _park.AddToBankroll(100f);
        Assert.AreEqual(100f, _park.Bankroll);
        _park.AddToBankroll(150f);
        Assert.AreEqual(250f, _park.Bankroll);
    }

    [Test]
    public void shouldRemoveFromBankrollCorrectly()
    {
        _park.AddToBankroll(100f);
        Assert.AreEqual(100f, _park.Bankroll);

        Assert.IsTrue(_park.SpendMoney(60f));
        Assert.AreEqual(40f, _park.Bankroll);

        // Not enough money left, transaction fails
        Assert.IsFalse(_park.SpendMoney(60f));
        Assert.AreEqual(40f, _park.Bankroll);
    }

    [Test]
    public void shouldComputeAdmissionFeeCorrectly()
    {
        // Admission fee computed as follow:
        // (Base admission fee) + (for each ride: contribution to admission fee) - (for each ad campaign: rebate)
        _park.BaseAdmissionFee = 10f;
        Assert.AreEqual(10f, _park.AdmissionFee);

        Ride ride1 = CreateMockRide(5f);
        Ride ride2 = CreateMockRide(10f);
        _park.AddNewRide(ride1);
        _park.AddNewRide(ride2);
        Assert.AreEqual(25f, _park.AdmissionFee);

        AdvertisingCampaign a1 = CreateAdCampaign(5f, 0f);
        AdvertisingCampaign a2 = CreateAdCampaign(2f, 0f);
        _park.StartAdCampaign(a1);
        _park.StartAdCampaign(a2);
        Assert.AreEqual(18f, _park.AdmissionFee);

        _park.StopAdCampaign(a2);
        Assert.AreEqual(20f, _park.AdmissionFee);

        // The admission fee shouldn't be less than 0 (we shouldn't pay guests to enter the park lol)
        AdvertisingCampaign a3 = CreateAdCampaign(100f, 0f);
        _park.StartAdCampaign(a3);
        Assert.AreEqual(0f, _park.AdmissionFee);
    }

    [Test]
    public void shouldComputeSpawnRateCorrectly()
    {
        // Spawn rate computed as follow
        // 1 * (for each ad campaign: spawn rate)
        // Number of guests generated by one call to spawn is:
        // floor(nbr_guests_to_spawn * spawn_rate)
        Assert.AreEqual(0, _park.GuestsCount);

        _park.SpawnGuests();
        Assert.AreEqual(1f, _park.SpawnRate);
        Assert.AreEqual(1, _park.GuestsCount);

        // Spawn rate will be 1.5 * 1.25 = 1.875
        AdvertisingCampaign adCampaign1 = CreateAdCampaign(0f, 1.5f);
        AdvertisingCampaign adCampaign2 = CreateAdCampaign(0f, 1.25f);
        _park.StartAdCampaign(adCampaign1);
        _park.StartAdCampaign(adCampaign2);
        Assert.AreEqual(1.875f, _park.SpawnRate);

        _park.SpawnGuests(5); // 5 * 1.875 = 9.375 => 9 guests spawned
        Assert.AreEqual(10, _park.GuestsCount);

        _park.StopAdCampaign(adCampaign2);
        Assert.AreEqual(1.5f, _park.SpawnRate);
        _park.SpawnGuests(2);
        Assert.AreEqual(13, _park.GuestsCount);
    }

    [Test]
    public void shouldStartAdCampaignCorrectly()
    {
        AdvertisingCampaign campaignPrefab = CreateAdCampaign();

        IEnumerator<AdvertisingCampaign> campaigns = _park.AdvertisingCampaigns.GetEnumerator();
        Assert.IsFalse(campaigns.MoveNext());

        _park.StartAdCampaign(campaignPrefab);
        IEnumerator<AdvertisingCampaign> campaignsAfterAdd = _park.AdvertisingCampaigns.GetEnumerator();
        Assert.IsTrue(campaignsAfterAdd.MoveNext());
        Assert.AreEqual(campaignPrefab, campaignsAfterAdd.Current);
    }

    [Test]
    public void shouldTerminateAdCampaignCorrectly()
    {
        AdvertisingCampaign campaignPrefab = CreateAdCampaign();

        _park.StartAdCampaign(campaignPrefab);
        _park.StopAdCampaign(campaignPrefab);
        IEnumerator<AdvertisingCampaign> campaignsAfterRemove = _park.AdvertisingCampaigns.GetEnumerator();
        Assert.IsFalse(campaignsAfterRemove.MoveNext());
    }

    [Test]
    public void shouldHireEmployeeCorrectly()
    {
        SocialMediaManager employeePrefab = CreateEmployeePrefab();

        IEnumerator<SocialMediaManager> employees = _park.Employees.GetEnumerator();
        Assert.IsFalse(employees.MoveNext());

        _park.HireEmployee(employeePrefab);
        IEnumerator<SocialMediaManager> employeesAfterAdd = _park.Employees.GetEnumerator();
        Assert.IsTrue(employeesAfterAdd.MoveNext());
        Assert.AreEqual(employeePrefab, employeesAfterAdd.Current);
    }

    [Test]
    public void shouldFurloughEmployeeCorrectly()
    {
        SocialMediaManager employeePrefab = CreateEmployeePrefab();

        _park.HireEmployee(employeePrefab);
        _park.FurloughEmployee(employeePrefab);
        IEnumerator<SocialMediaManager> employeesAfterRemove = _park.Employees.GetEnumerator();
        Assert.IsFalse(employeesAfterRemove.MoveNext());
    }

    [Test]
    public void shouldAddRideCorrectly()
    {
        Ride ridePrefab = CreateMockRide();

        IEnumerator<Ride> rides = _park.Rides.GetEnumerator();
        Assert.IsFalse(rides.MoveNext());

        _park.AddNewRide(ridePrefab);
        IEnumerator<Ride> ridesAfterAdd = _park.Rides.GetEnumerator();
        Assert.IsTrue(ridesAfterAdd.MoveNext());
        Assert.AreEqual(ridePrefab, ridesAfterAdd.Current);
    }

    [Test]
    public void shouldAddShopCorrectly()
    {
        Shop shopPrefab = CreateMockShop();

        IEnumerator<Shop> shopsBeforeAdd = _park.Shops.GetEnumerator();
        Assert.IsFalse(shopsBeforeAdd.MoveNext());

        _park.AddNewShop(shopPrefab);
        IEnumerator<Shop> shopsAfterAdd = _park.Shops.GetEnumerator();
        Assert.IsTrue(shopsAfterAdd.MoveNext());
        Assert.AreEqual(shopPrefab, shopsAfterAdd.Current);
    }

    private static AdvertisingCampaign CreateAdCampaign(float rebateToAdmissionFee = 0f, float spawnRateIncrease = 1f)
    {
        GameObject temp = new GameObject();
        temp.AddComponent<AdvertisingCampaign>();
        temp.GetComponent<AdvertisingCampaign>().SpawnRateIncrease = spawnRateIncrease;
        temp.GetComponent<AdvertisingCampaign>().AdmissionFeeRebate = rebateToAdmissionFee;
        temp.GetComponent<AdvertisingCampaign>().MonthlyCost = 0f;
        return temp.GetComponent<AdvertisingCampaign>();
    }

    private static Ride CreateMockRide(float contributionToAdmFee = 0f)
    {
        GameObject temp = new GameObject();
        temp.AddComponent<Ride>();
        temp.GetComponent<Ride>().ContributionToAdmissionFee = contributionToAdmFee;
        return temp.GetComponent<Ride>();
    }

    private static SocialMediaManager CreateEmployeePrefab()
    {
        GameObject t = new GameObject();
        t.AddComponent<SocialMediaManager>();
        return t.GetComponent<SocialMediaManager>();
    }

    private static Shop CreateMockShop()
    {
        GameObject t = new GameObject();
        t.AddComponent<Shop>();
        return t.GetComponent<Shop>();
    }
}
